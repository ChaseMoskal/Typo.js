{"version":3,"sources":["Typo.js"],"names":["moduleFactory","define","amd","module","exports","scone","declare","this","Typo","x","mode","d","undefined","pass","TypoAll","stuff","tests","arrlike","Error","call","passing","i","len","length","inversionHandling","args","ret","invert","arg","inverter","push","def","undef","nul","set","unset","truthy","falsey","bool","constructor","Boolean","num","Number","integer","str","String","obj","Object","plob","func","Function","arr","Array","regex","RegExp","empty","keys","bearing","is","y","isnt","gt","lt","gte","lte","has","contains","prototype","indexOf","test","create","All","all","inv","key","arguments","apply","shift","sargs","concat","unshift","allTestsPass","end","e","or","o","synonymize","a","defined","number","string","object","plainObject","array","arrayLike","notEmpty","regExp","greater","less","greaterOrEqual","lessOrEqual"],"mappings":"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","file":"Typo.min.js","sourcesContent":["/*//////////////////////////////////////////////////////////////////////////////\n================================================================================\n        TYPO\n          Chainable type checking and argument validation\n          Check yourself before you wreck yourself\n================================================================================\n//////////////////////////////////////////////////////////////////////////////*/\n // By Chase Moskal\n // MIT Licensed\n\n\n(function(moduleFactory){\n\t// AMD\n\tif (typeof define !== 'undefined' && define.amd)\n\t\tdefine(moduleFactory);\n\n\t// COMMON JS\n\telse if (typeof module !== 'undefined' && module.exports)\n\t\tmodule.exports = moduleFactory();\n\n\t// SCONE\n\telse if (typeof scone !== 'undefined')\n\t\tscone.declare('Scone/Typo.js', moduleFactory);\n\n\t// GLOBAL\n\telse this.Typo = moduleFactory();\n\n})(function TYPO_MODULE (){\n\t'use strict';\n\n\n\n\t//==========================================================================\n\t//:::::: TESTS :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\t//==========================================================================\n\n\tvar tests = {};\n\n\n\t//////// SIMPLE TESTS //////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\ttests.def   = function (x) { return x !== undefined };\n\ttests.undef = function (x) { return x === undefined };\n\ttests.nul   = function (x) { return x === null };\n\ttests.set   = function (x) { return tests.def(x) && !tests.nul(x) };\n\ttests.unset = function (x) { return !tests.set(x) };\n\n\ttests.truthy = function (x) { return !!x };\n\ttests.falsey = function (x) { return !x };\n\n\ttests.bool    = function (x) { return tests.set(x) && x.constructor === Boolean };\n\ttests.num     = function (x) { return tests.set(x) && x.constructor === Number };\n\ttests.integer = function (x) { return tests.num(x) && x%1 === 0 };\n\ttests.str     = function (x) { return tests.set(x) && x.constructor === String };\n\n\ttests.obj     = function (x) { return tests.set(x) && (x instanceof Object || typeof x == 'object') };\n\ttests.plob    = function (x) { return tests.set(x) && x.constructor === Object };\n\ttests.func    = function (x) { return tests.set(x) && x.constructor === Function };\n\ttests.arr     = function (x) { return tests.set(x) && x.constructor === Array };\n\ttests.arrlike = function (x) { return tests.set(x) && tests.num(x.length) };\n\n\ttests.regex = function (x) { return tests.set(x) && x.constructor === RegExp };\n\t\n\ttests.empty = function (x) {\n\t\tif (tests.arrlike(x)) {\n\t\t\treturn (x.length === 0);\n\t\t} else if (tests.obj(x)) {\n\t\t\treturn (Object.keys(x).length === 0);\n\t\t} else throw new Error(\"can only check if objects or arraylikes are empty\");\n\t};\n\ttests.bearing = function (x) { return !tests.empty(x) };\n\n\n\t//////// COMPARISON TESTS //////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\ttests.is   = function (x, y) { return x === y };\n\ttests.isnt = function (x, y) { return x !== y };\n\n\ttests.gt  = function (x, y) { return x > y };\n\ttests.lt  = function (x, y) { return x < y };\n\ttests.gte = function (x, y) { return x >= y };\n\ttests.lte = function (x, y) { return x <= y };\n\n\n\t//////// ADVANCED TESTS ////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\ttests.has      = function (x, y) { return y in x };\n\ttests.contains = function (x, y) { return Array.prototype.indexOf.call(x, y) !== -1 };\n\n\ttests.test = function (x, y) {\n\t\tif (!tests.func(y)) throw new Error(\"Custom Typo tests must be functions\");\n\t\treturn y(x);\n\t};\n\n\n\n\t//==========================================================================\n\t//:::::: TYPO CHAIN CONSTRUCTOR ::::::::::::::::::::::::::::::::::::::::::::\n\t//==========================================================================\n\n\tfunction Typo (x, mode) {\n\t\tif (!(this instanceof Typo)) return new Typo(x, mode);\n\n\t\tthis.x = x; // The value being scrutinized by the chain.\n\t\tthis.d = undefined; // Default value\n\n\t\tif (mode === undefined)  mode = '&&';\n\t\telse if (mode === 'and') mode = '&&';\n\t\telse if (mode === 'all') mode = '&&';\n\t\telse if (mode === 'or')  mode = '||';\n\t\telse if (mode === 'any') mode = '||';\n\t\tthis.mode = mode;\n\n\t\tthis.pass = (mode === '||') ? false : true;\n\t}\n\n\tTypo.prototype.default = function (d) {\n\t\tthis.d = d;\n\t\treturn this;\n\t};\n\n\n\t//////// ALL CHAIN: MULTIPLE INPUTS ////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction TypoAll (stuff, mode) {\n\t\tif (!(this instanceof TypoAll)) return new TypoAll(stuff, mode);\n\t\tif (!tests.arrlike(stuff)) throw new Error(\"TypoAll expects an array-like argument\");\n\t\tTypo.call(this, stuff, mode);\n\n\t\tthis.stuff = stuff;\n\n\t\tthis.passing = [];\n\t\tfor (var i=0, len=stuff.length; i<len; i+=1)\n\t\t\tthis.passing[i] = (this.mode === '||') ? false : true;\n\t}\n\n\tTypoAll.prototype = Object.create(Typo.prototype);\n\t  // TypoAll inherits from Typo\n\n\tTypoAll.prototype.constructor = TypoAll;\n\n\tTypoAll.prototype.default = undefined;\n\t  // Disabling default functionality\n\t  // for all chains, because it only makes sense for single-inputs.\n\n\tTypo.All = Typo.all = TypoAll; // Attaching to Typo with synonym\n\n\n\n\t//==========================================================================\n\t//:::::: TEST IMPLEMENTATIONS ::::::::::::::::::::::::::::::::::::::::::::::\n\t//==========================================================================\n\n\t//////// INVERSION HANDLING ////////\n\t////////////////////////////////////\n\n\tTypo.inverter = Typo.inv = new function TypoInverter () {};\n\t  // Creating the uniquely identifiable inverter object\n\n\tfunction inversionHandling (args) {\n\t\tvar ret = [];\n\t\tvar invert = false;\n\t\tfor (var i=0, len=args.length; i<len; i+=1) { // Inversion handling\n\t\t\tvar arg = args[i];\n\t\t\tif (arg === Typo.inverter) invert = true;\n\t\t\telse ret.push(arg);\n\t\t}\n\t\treturn { args: ret, invert: invert };\n\t}\n\n\n\t//////// RAW ACCESS ////////\n\t////////////////////////////\n\n\tTypo.tests = tests;\n\n\n\t//////// IMPLEMENTING EVERY TEST ////////\n\t/////////////////////////////////////////\n\n\tfor (var key in tests) {\n\t\tvar test = tests[key];\n\n\n\t\t//////// STATIC ////////////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t // Implementing static tests, like Typo.num(4)\n\n\t\tTypo[key] = (function(test){\n\t\t\treturn function staticTypoTest () {\n\t\t\t\tvar inv = inversionHandling(arguments);\n\t\t\t\tvar pass = test.apply(this, inv.args);\n\t\t\t\tpass = (inv.invert === false) ? pass : !pass;\n\t\t\t\treturn pass;\n\t\t\t};\n\t\t})(test);\n\n\n\t\t//////// STATIC (TYPO ALL) /////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t // Implementing static tests for TypoAll, like Typo.num([4, 5, 6])\n\n\t\tTypoAll[key] = (function(test){\n\t\t\treturn function allStaticTestImplementation (stuff) {\n\t\t\t\tif (!tests.arrlike(stuff) && tests.bearing(stuff)) throw new Error(\"Typo All tests must be given a bearing array-like\");\n\t\t\t\tvar inv = inversionHandling(arguments);\n\n\t\t\t\tinv.args.shift();\n\t\t\t\tvar pass = true;\n\t\t\t\tfor (var i=0, len=stuff.length; i<len; i+=1) {\n\t\t\t\t\tvar sargs = [stuff[i]].concat(inv.args);\n\t\t\t\t\tpass = pass && test.apply(this, sargs);\n\t\t\t\t\tpass = (inv.invert === false) ? pass : !pass;\n\t\t\t\t};\n\n\t\t\t\treturn pass;\n\t\t\t};\n\t\t})(test);\n\n\n\t\t//////// CHAIN TEST ////////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t // Implementing chain tests, like Typo(4).num().gt(-1).e().\n\n\t\tTypo.prototype[key] = (function(test){\n\t\t\treturn function chainTestImplementation () {\n\t\t\t\tvar inv = inversionHandling(arguments);\n\n\t\t\t\tinv.args.unshift(this.x);\n\t\t\t\tvar pass = test.apply(this, inv.args);\n\t\t\t\tpass = (inv.invert === false) ? pass : !pass;\n\n\t\t\t\tthis.pass = (this.mode === '||')\n\t\t\t\t\t? this.pass || pass\n\t\t\t\t\t: this.pass && pass;\n\n\t\t\t\treturn this;\n\t\t\t};\n\t\t})(test);\n\n\n\t\t//////// CHAIN TEST (TYPO ALL) /////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t // Implementing chain tests for TypoAll,\n\t\t //  like Typo([4, 5, 6]).num().gt(-1).e().\n\n\t\tTypoAll.prototype[key] = (function(test){\n\t\t\treturn function chainTestAllImplementation () {\n\t\t\t\tvar inv = inversionHandling(arguments);\n\n\t\t\t\tfor (var i=0, len=this.stuff.length; i<len; i+=1) {\n\t\t\t\t\tvar sargs = [this.stuff[i]].concat(inv.args);\n\t\t\t\t\tvar pass = test.apply(this, sargs);\n\t\t\t\t\tpass = (inv.invert === false) ? pass : !pass;\n\t\t\t\t\tthis.passing[i] = (this.mode === '||')\n\t\t\t\t\t\t? this.passing[i] || pass\n\t\t\t\t\t\t: this.passing[i] && pass;\n\t\t\t\t}\n\n\t\t\t\tvar allTestsPass = !tests.contains(this.passing, false);\n\t\t\t\tthis.pass = (this.mode === '||')\n\t\t\t\t\t? this.pass || allTestsPass\n\t\t\t\t\t: this.pass && allTestsPass;\n\n\t\t\t\treturn this;\n\t\t\t};\n\t\t})(test);\n\n\t};\n\n\n\n\t//==========================================================================\n\t//:::::: CHAIN TERMINATION :::::::::::::::::::::::::::::::::::::::::::::::::\n\t//==========================================================================\n\n\t//////// CHAIN END ////////\n\t///////////////////////////\n\t // Simply returns the boolean result of the whole chain.\n\n\tTypo.prototype.end = Typo.prototype.e = function end () { return this.pass };\n\n\n\t//////// CHAIN OR /////////\n\t///////////////////////////\n\t // If passing, this method returns the originally provided value.\n\t // If not passing, this method returns the given fallback value.\n\t //   If the provided fallback is an error object, it will be thrown.\n\t //   If no fallback is provided, a default error will be thrown.\n\n\tTypo.prototype.or = Typo.prototype.o = function endChain (y) {\n\t\tif (this.d !== undefined && this.x === undefined) return this.d;\n\t\t  // Default values\n\n\t \tif (this.pass) return this.x; // SUCCESSFUL VALUE, PASS IT BACK\n\t\telse { // CHAIN FAILED!\n\t\t\tif (y === undefined) throw new Error(\"Typo: Chain failed\"); // Default chain error\n\t\t\telse if (y instanceof Error) throw y; // Custom error specified\n\t\t\telse return y; // Fallback value specified\n\t\t}\n\t};\n\n\n\n\t//==========================================================================\n\t//:::::: SYNONYMS ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\t//==========================================================================\n\n\t(function synonymize (a) {\n\t\ta.undefined      = a.undef;\n\t\ta.defined        = a.def;\n\t\ta.null           = a.nul;\n\n\t\ta.boolean        = a.bool;\n\t\ta.number         = a.num;\n\t\ta.int            = a.integer;\n\t\ta.string         = a.str;\n\n\t\ta.object         = a.obj;\n\t\ta.plainObject    = a.plob;\n\t\ta.function       = a.func;\n\t\ta.array          = a.arr;\n\t\ta.arrayLike      = a.arrlike;\n\n\t\ta.notEmpty       = a.bearing;\n\t\ta.regExp         = a.regex;\n\n\t\ta.greater        = a.gt;\n\t\ta.less           = a.lt;\n\t\ta.greaterOrEqual = a.gte;\n\t\ta.lessOrEqual    = a.lte;\n\n\t\treturn synonymize;\n\t})\n\t (Typo.tests)\n\t (Typo)\n\t (Typo.prototype)\n\t (TypoAll)\n\t (TypoAll.prototype);\n\n\n\n\treturn Typo;\n});"],"sourceRoot":"/source/"}